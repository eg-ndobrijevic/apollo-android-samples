type Appearance {
  hairColor: String!
  measurements: Measurements!
}

interface Character {
  name: String!
}

type Droid implements Character {
  name: String!
  parts: Parts!
  primaryFunction: String!
  friendsConnection: FriendsConnection!
}

type FriendsConnection {
  count: Int!
  edges: [Character!]!
}

type Human implements Character {
  appearance: Appearance!
  job: String!
  name: String!
  friendsConnection: FriendsConnection!
}

type Measurements {
  height: Int!
}

type Mechanical {
  screws: Int!
  springs: Int!
}

enum Operator {
  EQ
  GT
  LT
}

type Parts {
  mechanical: Mechanical!
  supplier: String!
}

type Query {
  iAmLucky: SearchResult!
  randomCharacter: Character!
  search(query: QueryInput!): SearchResult!
}

input QueryInput {
  op: Operator!
  text: String!
}

union SearchResult = Droid | Human | Starship

type Starship {
  name: String!
}

schema {
  subscription: subscription
  query: Query
  mutation: mutation
}
